// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  WRITER
  USER
}

enum Status {
  APPROVE
  UNAPPROVE
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  movies    Movie[]  @relation("CreatedMovies")
  comments  Comment[]
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String
  releaseYear Int?
  synopsis    String?
  availability String?
  posterUrl   String?
  rating      Float?   
  linkTrailer String?
  status      Status    @default(UNAPPROVE)
  createdBy   User      @relation("CreatedMovies", fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime  @default(now())

  country     Country   @relation(fields: [countryId], references: [id])
  countryId   Int

  awards      Award[]
  actors      MovieActor[]
  genres      MovieGenre[]
  comments    Comment[]
}

model Actor {
  id         Int       @id @default(autoincrement())
  name       String
  birthdate  DateTime?
  biography  String?
  photoUrl   String?
  country    Country   @relation(fields: [countryId], references: [id])
  countryId  Int
  createdAt  DateTime  @default(now())

  movies     MovieActor[]
}

model Genre {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())

  movies     MovieGenre[]
}

model Award {
  id         Int       @id @default(autoincrement())
  name       String
  description String?
  movie      Movie     @relation(fields: [movieId], references: [id])
  movieId    Int
  createdAt  DateTime  @default(now())
}

model Country {
  id         Int       @id @default(autoincrement())
  name       String
  code       String?
  createdAt  DateTime  @default(now())

  actors     Actor[]
  movies     Movie[]
}

model Comment {
  id         Int       @id @default(autoincrement())
  movie      Movie     @relation(fields: [movieId], references: [id])
  movieId    Int
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  commentText String
  rating     Int
  status     Status    @default(UNAPPROVE)
  createdAt  DateTime  @default(now())
}

model MovieActor {
  movie     Movie   @relation(fields: [movieId], references: [id])
  movieId   Int
  actor     Actor   @relation(fields: [actorId], references: [id])
  actorId   Int
  createdAt DateTime @default(now())

  @@id([movieId, actorId])
}

model MovieGenre {
  movie     Movie   @relation(fields: [movieId], references: [id])
  movieId   Int
  genre     Genre   @relation(fields: [genreId], references: [id])
  genreId   Int
  createdAt DateTime @default(now())

  @@id([movieId, genreId])
}
